diff -rNpu linux-2.6.32-220.4.2.el6.x86_64/security/selinux/avc.c linux-2.6.32-220.4.2.el6/security/selinux/avc.c
--- linux-2.6.32-220.4.2.el6.x86_64/security/selinux/avc.c	2012-02-06 23:54:36.000000000 +0400
+++ linux-2.6.32-220.4.2.el6/security/selinux/avc.c	2013-07-04 14:51:03.612656595 +0400
@@ -794,6 +795,7 @@ int avc_has_perm(u32 ssid, u32 tsid, u16
 	avc_audit(ssid, tsid, tclass, requested, &avd, rc, auditdata);
 	return rc;
 }
+EXPORT_SYMBOL(avc_has_perm);
 
 u32 avc_policy_seqno(void)
 {
diff -rNpu linux-2.6.32-220.4.2.el6.x86_64/security/selinux/ss/services.c linux-2.6.32-220.4.2.el6/security/selinux/ss/services.c
--- linux-2.6.32-220.4.2.el6.x86_64/security/selinux/ss/services.c	2012-02-06 23:57:03.000000000 +0400
+++ linux-2.6.32-220.4.2.el6/security/selinux/ss/services.c	2013-07-04 16:25:59.366205616 +0400
@@ -70,6 +70,7 @@ extern void selnl_notify_policyload(u32 
 
 int selinux_policycap_netpeer;
 int selinux_policycap_openperm;
+EXPORT_SYMBOL(selinux_policycap_openperm);
 
 static DEFINE_RWLOCK(policy_rwlock);
 
@@ -779,6 +779,7 @@ out:
 	read_unlock(&policy_rwlock);
 	return rc;
 }
+EXPORT_SYMBOL(security_validate_transition);
 
 /*
  * security_bounded_transition - check whether the given
@@ -1094,6 +1096,7 @@ int security_sid_to_context(u32 sid, cha
 {
 	return security_sid_to_context_core(sid, scontext, scontext_len, 0);
 }
+EXPORT_SYMBOL(security_sid_to_context);
 
 int security_sid_to_context_force(u32 sid, char **scontext, u32 *scontext_len)
 {
@@ -1099,6 +1099,7 @@ int security_sid_to_context_force(u32 si
 {
 	return security_sid_to_context_core(sid, scontext, scontext_len, 1);
 }
+EXPORT_SYMBOL(security_sid_to_context_force);
 
 /*
  * Caveat:  Mutates scontext.
@@ -1264,6 +1264,7 @@ int security_context_to_sid(const char *
 	return security_context_to_sid_core(scontext, scontext_len,
 					    sid, SECSID_NULL, GFP_KERNEL, 0);
 }
+EXPORT_SYMBOL(security_context_to_sid);
 
 /**
  * security_context_to_sid_default - Obtain a SID for a given security context,
@@ -1294,6 +1294,7 @@ int security_context_to_sid_default(cons
 	return security_context_to_sid_core(scontext, scontext_len,
 					    sid, def_sid, gfp_flags, 1);
 }
+EXPORT_SYMBOL(security_context_to_sid_default);
 
 int security_context_to_sid_force(const char *scontext, u32 scontext_len,
 				  u32 *sid)
@@ -1297,6 +1298,7 @@ int security_context_to_sid_force(const 
 	return security_context_to_sid_core(scontext, scontext_len,
 					    sid, SECSID_NULL, GFP_KERNEL, 1);
 }
+EXPORT_SYMBOL(security_context_to_sid_force);
 
 static int compute_sid_handle_invalid_context(
 	struct context *scontext,
@@ -1484,6 +1487,7 @@ int security_transition_sid(u32 ssid,
 	return security_compute_sid(ssid, tsid, tclass, AVTAB_TRANSITION,
 				    out_sid, true);
 }
+EXPORT_SYMBOL(security_transition_sid);
 
 int security_transition_sid_user(u32 ssid,
 				 u32 tsid,
diff -Npu linux-2.6.32-279.2.1.el6.x86_64/security/security.c linux-2.6.32-220.4.2.el6/security/security.c > patch.patch
--- linux-2.6.32-279.2.1.el6.x86_64/security/security.c	2012-09-07 15:26:44.062896989 +0400
+++ linux-2.6.32-220.4.2.el6/security/security.c	2013-09-09 21:29:01.803334775 +0400
@@ -577,6 +578,7 @@ void security_inode_post_setxattr(struct
 		return;
 	security_ops->inode_post_setxattr(dentry, name, value, size, flags);
 }
+EXPORT_SYMBOL(security_inode_post_setxattr);
 
 int security_inode_getxattr(struct dentry *dentry, const char *name)
 {
